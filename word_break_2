//Word break II

//2^n solution
#include<iostream>
#include<fstream>
#include<vector>
#include<map>
#include<algorithm>
#include<set>
#include <cmath>
#include<string.h>
#include <stdio.h>
#include <unordered_map>
#include <queue>
#include<climits>
#include <iomanip>
#include<iostream>
#include<fstream>
#include<vector>
#include<map>
#include<algorithm>
#include<set>
#include <cmath>
#include<string.h>
#include <stdio.h>
#include <unordered_map>
#include <queue>
#include<climits>
#include <iomanip>
#include <unordered_set>


class Solution {
public:
    map<string, bool> ok;
    
    vector<string> wordBreak(string s, vector<string>& wordDict) {
       vector<string> ret;
       int n = s.size();
        for (int i = 0; i < wordDict.size(); i++) {
            ok[wordDict[i]] = true;
        }
        if (ok[s]) {
            ret.push_back(s);
        }

        for (int i = 1; i<(1<<n); i++) {
            string curr = "";
            string add = "";
            bool alr = false;
            for (int j = 0; j < n; j ++) {
                curr += s[j];
                //there is a space after the jth index
                if (i & (1<<j)) {
                    if (!ok[curr]) {
                        break;
                    }

                    if(add != "")add += " ";
                    add += curr;
                    curr = "";
                }
                if (j == n-1) {
                    alr = true;
                }
            }
            if (!ok[curr]) {
                continue;
            }
            add += " ";
            add += curr;
            //cout << add << endl;

            if(alr)ret.push_back(add);
        }

        return ret;
    }   
};